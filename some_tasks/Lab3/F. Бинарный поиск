Дан массив из nn элементов, упорядоченный в порядке неубывания, и mm запросов: найти первое и последнее вхождение числа в массив.

Входные данные
В первой строке содержится одно число nn – размер массива (1 \le n \le 1000001≤n≤100000).
Во второй строке находится nn чисел в порядке неубывания – элементы массива.
В третьей строке находится число mm – количество запросов.
В последней строке находится mm чисел – запросы.

Выходные данные
Для каждого запроса выведите в отдельной строке номер первого и последнего вхождения этого числа в массив. Если числа в массиве нет, выведите -1 -1.


#include <iostream>
#include <vector>

int First(int right, std::vector<int> vec, int x) {
    int left = 0;
    bool fl = true;
    while (left + 1 < right) {
        int mid = (left + right) / 2;
        if (vec[mid] < x) {
            left = mid;
        } else if (vec[mid] >= x) {
            right = mid;
            if (vec[mid] == x) {
                fl = false;
            }
        }
    }
    if (fl) {
        return -1;
    } else if (vec[left] == x) {
        return left + 1;
    } else if (vec[right] == x) {
        return right + 1;
    }
}

int Last(int right, std::vector<int> vec, int x) {
    int left = 0;
    bool fl = true;
    while (left + 1 < right) {
        int mid = (left + right) / 2;
        if (vec[mid] <= x) {
            left = mid;
            if (vec[mid] == x) {
                fl = false;
            }
        } else if (vec[mid] > x) {
            right = mid;
        }
    }
    if (fl) {
        return -1;
    } else if (vec[right] == x) {
        return right + 1;
    } else if (vec[left] == x) {
        return left + 1;
    }
}

int main() {
    int n, m, x;
    std::cin >> n;
    std::vector<int> vec;
    vec.resize(n);
    for (int i = 0; i < n; i++) {
        std::cin >> vec[i];
    }
    std::cin >> m;
    for (int i = 0; i < m; ++i) {
        std::cin >> x;
        std::cout << First(n - 1, vec, x) << ' ' << Last(n - 1, vec, x) << std::endl;
    }
    return 0;
}



STDIN	     ||    STDOUT
5          ||     1 2
1 1 2 2 2  ||     3 5
3          ||    -1 -1
1 2 3      ||
